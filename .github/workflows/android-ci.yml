name: Android CI/CD with RTMP Support

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      
    - name: Install Android NDK
      run: |
        echo "y" | sdkmanager "ndk;26.1.10909125"
        echo "ANDROID_NDK_ROOT=$ANDROID_HOME/ndk/26.1.10909125" >> $GITHUB_ENV
        
    - name: Download Gradle Wrapper JAR
      run: |
        curl -L -o gradle/wrapper/gradle-wrapper.jar https://github.com/gradle/gradle/raw/v8.14.2/gradle/wrapper/gradle-wrapper.jar
        
    - name: Make gradlew executable
      run: chmod +x gradlew
      
    - name: Validate Gradle wrapper
      uses: gradle/wrapper-validation-action@v1
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Build with Gradle
      run: ./gradlew build --stacktrace --info
      
    - name: Run unit tests
      run: ./gradlew test --stacktrace
      
    - name: Build APK
      run: ./gradlew assembleDebug --stacktrace
      
    - name: Upload APK as artifact
      uses: actions/upload-artifact@v4
      with:
        name: virtual-camera-manager-rtmp-debug
        path: app/build/outputs/apk/debug/app-debug.apk
        retention-days: 30
        
    - name: Create Release APK
      if: github.ref == 'refs/heads/main'
      run: ./gradlew assembleRelease --stacktrace
      
    - name: Upload Release APK
      if: github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v4
      with:
        name: virtual-camera-manager-rtmp-release
        path: app/build/outputs/apk/release/app-release.apk
        retention-days: 90

  security-scan:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run security scan
      uses: securecodewarrior/github-action-add-sarif@v1
      with:
        sarif-file: 'security-scan-results.sarif'
      continue-on-error: true

  release:
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download Release APK
      uses: actions/download-artifact@v4
      with:
        name: virtual-camera-manager-rtmp-release
        path: ./release/
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: ./release/app-release.apk
        draft: false
        prerelease: false
        generate_release_notes: true
        body: |
          ## Virtual Camera Manager with RTMP Support
          
          ### Features
          - ✅ Root-based virtual camera management
          - ✅ V4L2 loopback device integration
          - ✅ Camera HAL interface support
          - ✅ RTMP stream input support
          - ✅ Multiple video source options
          - ✅ Real-time frame streaming
          - ✅ Professional Material Design UI
          
          ### Requirements
          - Rooted Android device (Android 7.0+)
          - V4L2 kernel support
          - Network access for RTMP streams
          
          ### Installation
          1. Download the APK
          2. Enable "Unknown Sources" in Android settings
          3. Install the APK
          4. Grant root permissions when prompted
          5. Configure your virtual camera settings
          
          ### RTMP Usage
          - Enter your RTMP stream URL (e.g., rtmp://server.com/live/stream)
          - Start the RTMP service to begin receiving frames
          - Start the virtual camera with "RTMP Stream" source
          - The app will process incoming RTMP frames and forward them to the system camera
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}